# .github/workflows/deploy.yml

name: 'Deploy & Verify Backend Infrastructure'

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

permissions:
  id-token: write      # Required for OIDC AWS authentication
  contents: read       # Required to checkout the repository
  pull-requests: write # Required to comment on Pull Requests

jobs:
  # ===================================================================
  # JOB 1: VALIDATE AND DEPLOY THE INFRASTRUCTURE
  # ===================================================================
  terraform:
    name: 'Terraform Plan & Apply'
    runs-on: ubuntu-latest
    
    # This 'outputs' block makes the Terraform outputs available to downstream jobs
    outputs:
      tf_outputs: ${{ steps.get_outputs.outputs.apply_outputs }}

    defaults:
      run:
        working-directory: ./backend/environments/dev

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: me-central-1 # Your target AWS region

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '~> 1.6.0'

      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check -recursive

      - name: Terraform Init
        id: init
        run: terraform init -upgrade

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -out=tfplan
        continue-on-error: true # Continue so we can comment on the PR

      - name: Update PR with Terraform Plan
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        env:
          PLAN_EXIT_CODE: ${{ steps.plan.outputs.exitcode }}
          PLAN_STDOUT: ${{ steps.plan.outputs.stdout }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const exitCode = process.env.PLAN_EXIT_CODE;
            const planOutput = process.env.PLAN_STDOUT;
            let body = "";
            if (exitCode === '1') {
              body = `‚ùå **Terraform Plan Failed**\n\n<details><summary>Show Error</summary>\n\n\`\`\`\n${planOutput}\n\`\`\`\n</details>`;
            } else if (exitCode === '2') {
              body = `#### Terraform Plan üìñ\n\nThere are infrastructure changes proposed.\n<details><summary>Show Plan</summary>\n\n\`\`\`terraform\n${planOutput}\n\`\`\`\n</details>`;
            } else {
              body = "‚úÖ **Terraform Plan:** No infrastructure changes detected.";
            }
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner, repo: context.repo.repo, issue_number: context.issue.number,
            });
            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' && (comment.body.includes('Terraform Plan'))
            );
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner, repo: context.repo.repo, comment_id: botComment.id, body: body
              });
            } else {
              await github.rest.issues.createComment({
                issue_number: context.issue.number, owner: context.repo.owner, repo: context.repo.repo, body: body
              });
            }

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve tfplan

      # This step makes the Terraform outputs from the apply step available to other jobs in the workflow.
      - name: Get Terraform Outputs
        id: get_outputs
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          output=$(terraform output -json)
          echo "apply_outputs=$output" >> $GITHUB_OUTPUT
        
  # ===================================================================
  # JOB 2: VERIFY THE LIVE INSTANCE CONFIGURATION
  # ===================================================================
  verify-instance:
    name: 'Verify Live Instance'
    # This job depends on the 'terraform' job and will only run after it succeeds.
    needs: terraform
    # This condition ensures the verification only runs after a successful deployment to 'main'.
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS Credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: me-central-1 # Your target AWS region

      - name: 'Wait for Instance Bootstrap and Health Checks'
        run: |
          echo "Waiting for 5 minutes for new instances to bootstrap, start the service, and become healthy..."
          sleep 300
      
      - name: 'Get Target Instance ID for Verification'
        id: get_instance
        run: |
          # Parse the JSON output from the 'terraform' job to get the ASG name
          ASG_NAME=$(echo '${{ needs.terraform.outputs.tf_outputs }}' | jq -r '.autoscaling_group_name.value')
          if [ "$ASG_NAME" = "null" ]; then
            echo "::error::Could not parse Auto Scaling Group name from Terraform outputs."
            exit 1
          fi
          echo "Target Auto Scaling Group: $ASG_NAME"
          
          # Use the AWS CLI to find a running, healthy instance in that ASG
          INSTANCE_ID=$(aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names "$ASG_NAME" --region me-central-1 | jq -r '.AutoScalingGroups[0].Instances[] | select(.LifecycleState == "InService" and .HealthStatus == "Healthy") | .InstanceId' | head -n 1)
          
          if [ -z "$INSTANCE_ID" ]; then
            echo "::error::Could not find any 'InService' and 'Healthy' instances in the ASG. Deployment likely failed."
            exit 1
          fi
          
          echo "Found healthy target instance for verification: $INSTANCE_ID"
          echo "instance_id=$INSTANCE_ID" >> $GITHUB_OUTPUT

      - name: 'Run Verification Script on Instance via SSM'
        id: run_verification
        run: |
          INSTANCE_ID=${{ steps.get_instance.outputs.instance_id }}
          
          echo "Executing verification script on instance $INSTANCE_ID..."
          
          # Define the shell commands to run on the remote instance
          COMMANDS=$(cat <<'EOF'
          echo "--- Verifying .env file ---"
          # Check for existence and permissions
          ls -la /home/ec2-user/app/src/.env

          echo "--- Verifying todoapp.service status ---"
          # Check that the service is active and running
          systemctl is-active todoapp.service
          EOF
          )

          # Send the commands using SSM Run Command
          COMMAND_ID=$(aws ssm send-command --instance-ids "$INSTANCE_ID" --document-name "AWS-RunShellScript" --parameters "commands=[$COMMANDS]" --region me-central-1 | jq -r '.Command.CommandId')
          
          echo "SSM Command sent. Command ID: $COMMAND_ID. Waiting for completion..."
          sleep 20 

          # Wait for the command to finish and get the output
          aws ssm wait command-executed --command-id "$COMMAND_ID" --instance-id "$INSTANCE_ID" --region me-central-1
          
          echo "--- Verification Script Output from Instance ---"
          aws ssm get-command-invocation --command-id "$COMMAND_ID" --instance-id "$INSTANCE_ID" --region me-central-1 | jq -r '.StandardOutputContent'
          
          # Check the final status of the command
          STATUS=$(aws ssm get-command-invocation --command-id "$COMMAND_ID" --instance-id "$INSTANCE_ID" --region me-central-1 | jq -r '.Status')
          if [ "$STATUS" != "Success" ]; then
            echo "::error::Verification script failed on the instance. See logs above for details."
            exit 1
          fi
          echo "‚úÖ Instance verification successful!"