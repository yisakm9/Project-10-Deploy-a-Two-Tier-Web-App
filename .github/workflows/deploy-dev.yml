# .github/workflows/deploy.yml

name: 'Deploy Backend Infrastructure with Terraform'

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
# OIDC permissions
permissions:
  id-token: write
  contents: read
  pull-requests: write # Required to comment on PRs

jobs:
  terraform:
    name: 'Terraform IaC'
    runs-on: ubuntu-latest
    
    defaults:
      run:
        shell: bash
        working-directory: ./backend # Set the working directory for all run steps

    steps:
      # 1. Checkout the repository to the runner
      - name: Checkout
        uses: actions/checkout@v4

      # 2. Configure AWS credentials using OIDC
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: us-east-1 # Change to your desired region

      # 3. Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.1 #  version for consistency

      # 4. Terraform Format Check
      - name: Terraform Format
        id: fmt
        run: terraform fmt 

      # 5. Terraform Init
      # Initializes Terraform and downloads necessary providers.
      - name: Terraform Init
        id: init
        run: terraform init

      # 6. Terraform Validate
      # Checks if the configuration is syntactically valid.
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      # 7. Terraform Plan
      # Creates an execution plan. This runs for both PRs and pushes to main.
      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -out=tfplan

      # 8. Add Plan to PR
      # Creates a comment on the PR with the plan output. This step only runs on PRs.
      - name: Create Plan Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Plan')
            });

            const output = `#### Terraform Plan ðŸ“–\`\`\`\n${{ steps.plan.outputs.stdout }}\n\`\`\``;

            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              });
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              });
            }
          
      # 9. Terraform Apply
      # This step only runs when code is pushed/merged to the main branch.
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve tfplan