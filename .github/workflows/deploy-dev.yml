# .github/workflows/deploy.yml

name: 'Deploy Backend Infrastructure with Terraform'

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch: 
permissions:
  id-token: write      # Required for OIDC authentication
  contents: read       # Required to checkout the code
  pull-requests: write # Required to comment on PRs

jobs:
  terraform:
    name: 'Terraform IaC'
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout the repository to the runner
      - name: Checkout
        uses: actions/checkout@v4

      # 2. Configure AWS credentials using OIDC
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: us-east-1 # Change to your desired region

      # 3. Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.1 #  version for consistency

      # 4. Terraform Init
      # Initializes the working directory. The -backend-config is for non-interactive init.
      - name: Terraform Init
        run: terraform init
        working-directory: ./backend

      # 5. Terraform Validate
      # Checks whether a configuration is syntactically valid.
      - name: Terraform Validate
        run: terraform validate
        working-directory: ./backend

      # 6. Terraform Plan
      # Generates an execution plan. The `cd` command ensures we are in the right directory.
      - name: Terraform Plan
        id: plan
        run: |
          cd backend
          terraform plan -no-color
        continue-on-error: true

      # 7. Post Terraform Plan to PR
      # Uses a dedicated, trusted action for commenting on PRs. This is the cleanest method.
      - name: Update PR with Terraform Plan
        if: github.event_name == 'pull_request'
        uses: thollander/actions-comment-pull-request@v2
        with:
          message: |
            #### Terraform Plan ðŸ“–
            <details><summary>Show Plan</summary>

            ```terraform
            ${{ steps.plan.outputs.stdout }}
            ```

            </details>
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 8. Handle Plan Errors
      # Explicitly check the outcome of the plan step.
      - name: Check Plan Outcome
        if: steps.plan.outcome == 'failure'
        run: |
          echo "Terraform plan failed. See the output above for details."
          exit 1

      # 9. Terraform Apply
      # This step only runs on a push event to the main branch.
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve
        working-directory: ./backend