# .github/workflows/deploy.yml

name: 'Deploy Backend Infrastructure with Terraform'

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  terraform:
    name: 'Terraform IaC'
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout the repository to the runner
      - name: Checkout
        uses: actions/checkout@v4

      # 2. Configure AWS credentials using OIDC
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: us-east-1 # Change to your desired region

      # 3. Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.1

      # 4. Terraform Format Check
      - name: Terraform Format
        id: fmt
        run: terraform fmt 
        working-directory: ./backend/environments/dev

      # 5. Terraform Init
      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ./backend/environments/dev

      # 6. Terraform Validate
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: ./backend/environments/dev

      # 7. Terraform Plan
      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -out=tfplan
        working-directory: ./backend/environments/dev

      # 8. Add Plan to PR
      - name: Create Plan Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          # This script will run at the root, so we pass the plan output explicitly
          script: |
            const { readFileSync } = require('fs');
            const planOutput = readFileSync('./backend/tfplan.out').toString();

            const output = `#### Terraform Plan ðŸ“–\n\n<details><summary>Show Plan</summary>\n\n\`\`\`\n${planOutput}\n\`\`\`\n</details>`;
            
            // Your existing script to find and update the comment...
            // (Keeping the original script logic for brevity)
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Plan')
            });
            
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              });
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              });
            }
        # Note: The original script to get plan output was simplified.
        # A more robust way is to save the plan, then read it.
        # Let's adapt the workflow to handle this better.
        # We need to expose the plan output differently.
        # A simpler way without file reading:
      - name: Expose Plan as Artifact
        if: github.event_name == 'pull_request'
        uses: actions/upload-artifact@v4 
        with:
          name: tfplan
          path: backend/tfplan

      # A more modern approach for commenting on PRs is to use a dedicated action
      - name: Update PR with Plan
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Plan ðŸ“–
            <details><summary>Show Plan</summary>
            \`\`\`${process.env.PLAN}\`\`\`
            </details>
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            
            // Your existing script to find and update the comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Plan')
            });

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              });
            } else {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              });
            }

      # 9. Terraform Apply
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve tfplan
        working-directory: ./backend/environments/dev