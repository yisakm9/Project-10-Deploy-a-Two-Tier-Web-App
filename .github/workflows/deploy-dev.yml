# .github/workflows/deploy.yml

name: 'Deploy Backend Infrastructure with Terraform'

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch: 
permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  terraform:
    name: 'Terraform IaC'
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout the repository to the runner
      - name: Checkout
        uses: actions/checkout@v4

      # 2. Configure AWS credentials using OIDC
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: us-east-1 # Change to your desired region

      # 3. Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.1

      # 4. Terraform Format Check
      - name: Terraform Format
        id: fmt
        run: terraform fmt -check -recursive
        working-directory: ./backend

      # 5. Terraform Init
      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ./backend

      # 6. Terraform Validate
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: ./backend

      # 7. Terraform Plan
      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        working-directory: ./backend
        # Continue on error allows the next step to handle plan output even if there are changes
        continue-on-error: true

      # 8. Update PR with Plan Output
      # This step uses the output from the 'plan' step to comment on the PR.
      - name: Update PR with Plan
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        env:
          # The stdout from the plan step is passed into the script
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Constant to identify the bot's comment
            const botCommentIdentifier = "#### Terraform Plan ðŸ“–";

            // The full body of the comment to post
            const output = `${botCommentIdentifier}
            <details><summary>Show Plan</summary>

            \`\`\`${process.env.PLAN}\`\`\`
            
            </details>
            
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            // Get all existing comments on the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            // Find any existing comment from our bot
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.startsWith(botCommentIdentifier)
            });

            // If we found an existing comment, update it
            // Otherwise, create a new one
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              });
            } else {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              });
            }

      # 9. Handle Plan Failure
      # If the plan step failed (e.g., due to an error in the code), fail the workflow.
      - name: Fail Workflow if Plan Failed
        if: steps.plan.outcome == 'failure'
        run: exit 1

      # 10. Terraform Apply
      # This step only runs when code is pushed/merged to the main branch.
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve
        working-directory: ./backend